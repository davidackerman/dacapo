import torch

from funlib.geometry import Coordinate


class Model(torch.nn.Module):
    """A trainable DaCapo model. Consists of an ``Architecture`` and a
    prediction head. Models are generated by ``Predictor``s.
    """

    def __init__(self, architecture, prediction_head):

        super().__init__()

        self.architecture = architecture
        self.prediction_head = prediction_head
        self.chain = torch.nn.Sequential(architecture, prediction_head)
        self.num_in_channels = architecture.num_in_channels

        self.input_shape = architecture.input_shape
        self.num_out_channels, self.output_shape = self.compute_output_shape(
            self.input_shape
        )

    def forward(self, x):
        return self.chain(x)

    def compute_output_shape(self, input_shape):
        """Compute the spatial shape (i.e., not accounting for channels and
        batch dimensions) of this model, when fed a tensor of the given spatial
        shape as input."""

        return self.__get_output_shape(input_shape, self.num_in_channels)

    def __get_output_shape(self, input_shape, in_channels):

        device = "cpu"
        for parameter in self.parameters():
            device = parameter.device
            break

        dummy_data = torch.zeros((1, in_channels) + input_shape, device=device)
        out = self.forward(dummy_data)
        return out.shape[1], tuple(out.shape[2:])

    def scale(self, voxel_size: Coordinate) -> Coordinate:
        return self.architecture.scale(voxel_size)
